plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'kotlin'
    id 'maven-publish'
    id 'org.beryx.jlink' version '2.25.0'
}

repositories {
    mavenCentral()
}

application {
    mainClass = "${rootProject.group}.gui.ApplicationKt"
    mainModule = 'joos.gui'
    applicationDefaultJvmArgs = ['--add-opens=javafx.graphics/javafx.scene=tornadofx']
}

javafx {
    version = "15.0.1"
    modules = ['javafx.controls', 'javafx.graphics', 'javafx.base']
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
    registerFeature("win") {
        usingSourceSet(sourceSets.main)
//        capability("com.amarcolini.joos", "gui", lib_version)
    }
    registerFeature("mac") {
        usingSourceSet(sourceSets.main)
//        capability("com.amarcolini.joos", "gui", lib_version)
    }
    registerFeature("linux") {
        usingSourceSet(sourceSets.main)
//        capability("com.amarcolini.joos", "gui", lib_version)
    }
}

configurations {
    imageDependency {
        extendsFrom implementation
        canBeResolved(true)
    }

    winRuntimeElements {
        attributes {
            attribute(OperatingSystemFamily.OPERATING_SYSTEM_ATTRIBUTE, objects.named(OperatingSystemFamily, OperatingSystemFamily.WINDOWS))
        }
    }

    winApiElements {
        attributes {
            attribute(OperatingSystemFamily.OPERATING_SYSTEM_ATTRIBUTE, objects.named(OperatingSystemFamily, OperatingSystemFamily.WINDOWS))
        }
    }

    macRuntimeElements {
        attributes {
            attribute(OperatingSystemFamily.OPERATING_SYSTEM_ATTRIBUTE, objects.named(OperatingSystemFamily, OperatingSystemFamily.MACOS))
        }
    }

    macApiElements {
        attributes {
            attribute(OperatingSystemFamily.OPERATING_SYSTEM_ATTRIBUTE, objects.named(OperatingSystemFamily, OperatingSystemFamily.MACOS))
        }
    }

    linuxRuntimeElements {
        attributes {
            attribute(OperatingSystemFamily.OPERATING_SYSTEM_ATTRIBUTE, objects.named(OperatingSystemFamily, OperatingSystemFamily.LINUX))
        }
    }

    linuxApiElements {
        attributes {
            attribute(OperatingSystemFamily.OPERATING_SYSTEM_ATTRIBUTE, objects.named(OperatingSystemFamily, OperatingSystemFamily.LINUX))
        }
    }
}

dependencies {
    api project(':navigation')
    implementation 'no.tornado:tornadofx:1.7.20'
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation 'io.github.classgraph:classgraph:4.8.147'

    winImplementation "org.openjfx:javafx-controls:$javafx.version:win"
    macImplementation "org.openjfx:javafx-controls:$javafx.version:mac"
    linuxImplementation "org.openjfx:javafx-controls:$javafx.version:linux"

    imageDependency "org.openjfx:javafx-graphics:$javafx.version:win"
    imageDependency "org.openjfx:javafx-graphics:$javafx.version:mac"
    imageDependency "org.openjfx:javafx-graphics:$javafx.version:linux"
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "11"
        apiVersion = "1.5"
    }
    destinationDirectory.set(compileJava.destinationDirectory.get())
}

publishing {
    publications {
        release(MavenPublication) {
            from components.java
            artifactId = "gui"
            pom {
                name = "Joos"
                description = "A comprehensive kotlin library designed for FTC."
                url = 'https://github.com/amarcolini/joos'
                developers {
                    developer {
                        id = 'amarcolini'
                        name = 'Alessandro Marcolini'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            name = 'testRepo'
            url = '../testRepo'
        }
    }
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    configuration = 'imageDependency'
    addExtraDependencies("javafx")
    forceMerge('javafx')

    mergedModule {
        excludeProvides servicePattern: 'com.fasterxml.jackson.*'
        uses 'kotlin.reflect.jvm.internal.impl.builtins.BuiltInsLoader'
        uses 'kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition'
        uses 'kotlin.reflect.jvm.internal.impl.util.ModuleVisibilityHelper'
    }

    launcher {
        name = "launcher"
        jvmArgs = ['--add-opens=javafx.graphics/javafx.scene=com.amarcolini.joos.merged.module']
        noConsole = true
    }

    targetPlatform("linux") {platform ->
        jdkHome = jdkDownload("https://api.adoptium.net/v3/binary/latest/11/ga/linux/x64/jdk/hotspot/normal/eclipse") {
            downloadDir = "./jdks/$platform.name/"
            archiveExtension = 'tar.gz'
        }
    }

    targetPlatform("win") {platform ->
        jdkHome = jdkDownload("https://api.adoptium.net/v3/binary/latest/11/ga/windows/x64/jdk/hotspot/normal/eclipse") {
            downloadDir = "./jdks/$platform.name/"
            archiveExtension = 'zip'
        }
    }

    targetPlatform("mac") {platform ->
        jdkHome = jdkDownload("https://api.adoptium.net/v3/binary/latest/11/ga/mac/x64/jdk/hotspot/normal/eclipse") {
            downloadDir = "./jdks/$platform.name/"
            archiveExtension = 'tar.gz'
        }
    }
}